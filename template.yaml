Description: Template to deploy Drupal application on EFS using ECS Fargate
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
   

Parameters:
  ClusterName:
    Type: String 
    Description: Name for Aurora Cluster DB and EFS. 
    Default: drupalonefs
  Image:
    Type: String
    Default: "drupal:8-apache"
    Description: Drupal Image for the ECS service. 
  MinCapacity:
    Description: Minimum Fargate tasks to run
    Type: Number
    Default: 1
  MaxCapacity:
    Description: Maximum Fargate tasks to scale
    Type: Number
    Default: 5
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Test
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24
  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.12.0/24
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24
  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.22.0/24
  DBAdminUsername:
    Description: Please enter a username for the Aurora DB that will be created as part of this stack. 
    Type: String
    Default: admin
  DBPassword:
    NoEcho: true
    Description: Please enter a password for the Aurora DB that will be created as part of this stack. 
    Type: String
    MinLength: 8
    MaxLength: 41
  MinimumAuroraCapacityUnit:
    Description: Minimum Aurora capacity unit
    Type: Number
    Default: 1
  MaximumAuroraCapacityUnit:
    Description: Maximum Aurora capacity unit
    Type: Number
    Default: 16    
  PerformanceMode:
    Type: String
    AllowedValues: [ generalPurpose, maxIO ]
    Default: generalPurpose
  EfsProvisionedThroughputInMibps:
    Type: Number
    MinValue: 0
    MaxValue: 1024
    Default: 0
  ThroughputMode:
    Type: String
    AllowedValues: [ bursting, provisioned ]
    Default: bursting
Rules:
  ProvisionedThroughput:
    RuleCondition: !Equals [ !Ref ThroughputMode, provisioned ]
    Assertions:
      - Assert: !Not [ !Equals [ '0', !Ref EfsProvisionedThroughputInMibps ] ]
        AssertDescription: "EfsProvisionedThroughputInMibps must be greater than 0 when ThroughputMode is provisioned"
  BurstingThroughput:
    RuleCondition: !Equals [ !Ref ThroughputMode, bursting ]
    Assertions:
      - Assert:  !Equals [ '0', !Ref EfsProvisionedThroughputInMibps ]
        AssertDescription: "EfsProvisionedThroughputInMibps must be 0 when ThroughputMode is bursting"
Conditions:
  IsProvisioned:
    !Equals [ !Ref ThroughputMode, provisioned ]

Mappings:
  RegionMap:
    us-east-1:
      "elbAcc" : "127311923021"
  
Resources:
  #VPC resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  vpcFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      LogDestination: !Join ['/',[!GetAtt loadbalancerLogBucket.Arn,vpcflowlogs]]
      LogDestinationType: s3
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: REJECT
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ3)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ3)


  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  
  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  
  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ3)

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3



  containersecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref ClusterName, ContainerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref albsecuritygroup
          Description: "Container security group Ingress rule"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: "Container security group Egress rule"
  
  containersecuritygroupEgressRuleEFS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      CidrIp: !Ref VpcCIDR
      Description: Container security group egress rule to access the EFS resources. 
      FromPort: 2049
      IpProtocol: tcp
      ToPort: 2049
      GroupId: !Ref containersecuritygroup
  containersecuritygroupEgressRuleAurora:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      CidrIp: !Ref VpcCIDR
      Description: Container security group egress rule to access the EFS resources. 
      FromPort: 3306
      IpProtocol: tcp
      ToPort: 3306
      GroupId: !Ref containersecuritygroup




  albsecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref ClusterName, LoadBalancerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "ALB security group Ingress rule"
      SecurityGroupEgress:
        - CidrIp: !Ref VpcCIDR
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          Description: "ALB security group Egress"

  loggroupKmskey:
    Type: AWS::KMS::Key
    Properties: 
      Description: KMS key to encrypt the CloudWatch LogGroup
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Join ['',['arn:aws:iam::',!Ref AWS::AccountId,':root']]
          Action: kms:*
          Resource: '*'
        - Sid: Enabled CloudWatch to access KMS
          Effect: Allow
          Principal:
            Service: !Join ['',['logs.',!Ref AWS::Region,'.amazonaws.com']]
          Action:
            - kms:Encrypt*
            - kms:Decrypt*
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:Describe*
          Resource: '*'
        - Sid: Allow ELB logs to be sent to S3
          Effect: Allow
          Principal:
            Service: delivery.logs.amazonaws.com
          Action:
            - kms:Encrypt*
            - kms:Decrypt*
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:Describe*
          Resource: '*'

      #KeySpec: String
      #KeyUsage: String
      PendingWindowInDays: 7

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ClusterName, taskdefinition]]
      RetentionInDays: 30
      KmsKeyId: !GetAtt loggroupKmskey.Arn

  taskdefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties: 
      RequiresCompatibilities:
        - "EC2"
        - "FARGATE"
      Family: !Join ["-",[!Ref ClusterName,td]]
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        -
          EntryPoint:
            - "sh"
            - "-c"
            - "cp -prR /var/www/html/sites/* /mnt"
          Essential: false
          Image: !Ref Image
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          MountPoints:
            - 
              ContainerPath: "/mnt"
              SourceVolume: "sites"
          Name: "initcontainer"
        -
          DependsOn:
            -
              Condition: "COMPLETE"
              ContainerName: "initcontainer"
          Essential: true
          Image: !Ref Image
          MountPoints:
            -
              ContainerPath: "/var/www/html/modules/"
              SourceVolume: "modules"
            
            - 
              ContainerPath: "/var/www/html/sites/"
              SourceVolume: "sites"

            - 
              ContainerPath: "/var/www/html/profiles/"
              SourceVolume: "profiles"

            - 
              ContainerPath: "/var/www/html/themes/"
              SourceVolume: "themes"
          Name: "drupal"
          PortMappings:
            -
              ContainerPort: 80
              HostPort: 80
              Protocol: tcp

      Cpu: "512"
      Memory: "1024"
      NetworkMode: awsvpc
      Volumes:
        - 
          Name: themes
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystem
            AuthorizationConfig:
              IAM: ENABLED
              AccessPointId: !Ref AccessPointThemes
            TransitEncryption: ENABLED
            RootDirectory: "/"
          
        
        -
          Name: profiles
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystem
            AuthorizationConfig:
              IAM: ENABLED
              AccessPointId: !Ref AccessPointProfiles
            TransitEncryption: ENABLED
            RootDirectory: "/"
          

        -
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystem
            AuthorizationConfig:
              IAM: ENABLED
              AccessPointId: !Ref AccessPointSites
            TransitEncryption: ENABLED
            RootDirectory: "/"
          Name: sites

        -
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystem
            AuthorizationConfig:
              IAM: ENABLED
              AccessPointId: !Ref AccessPointModules
            TransitEncryption: ENABLED
            RootDirectory: "/"
          Name: modules


Outputs:
  ALBEndpoint:
    Description: "ALB endpoint"
    Value: 
      !GetAtt loadbalancer.DNSName
  DBEndpoint:
    Description: "DB endpoint"
    Value: 
      !GetAtt DrupalDB.Endpoint.Address
